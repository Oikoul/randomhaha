print("Executed afk script")
local running = false
local parts = {}
local transporting = true
local cam = game.Workspace.CurrentCamera
local UIS = game:GetService("UserInputService")
local plr = game.Players.LocalPlayer
local plot = game:GetService("Players").LocalPlayer.Values.Plot.Value
local character = plr.Character
local humanoid = character and character:FindFirstChildOfClass("Humanoid")
-------------------------------------------------
for _, v in pairs(workspace.Plots:GetChildren()) do
	if v.Name == tostring(plot) then
		plot = v
		print("Plot: "..plot.Name)
	end
end
--^^plot identification
local shaker = plot.Objects:FindFirstChild("Sandbed Shaker")
local furnace = plot.Objects:FindFirstChild("Basic Furnace").Hitbox

UIS.InputEnded:Connect(function(k)
	if k.KeyCode == Enum.KeyCode.F1 then
		if running then
			running = false
			print("Stopped")
		else
			running = true
			print("Started")
		end
	end
end)
local function stage1()
	for _, v in pairs(workspace.Grabable:GetChildren()) do
		if v.Name == "MaterialPart" and v:FindFirstChild("Configuration") and v.Configuration:FindFirstChild("Data") and v.Configuration.Data:FindFirstChild("MatInd") and v.Configuration.Data.MatInd.Value == "Sandstone" and  (v.Part.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude < 30 then
			if v:FindFirstChild("Part") then
				if v.Part:FindFirstChild("BodyPosition") ~= nil then
					v.Part.BodyPosition:Destroy()
				end
				local bp = Instance.new("BodyPosition")
				bp.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
				bp.Parent = v.Part
				bp.Position = furnace.Position
				v.Part.CanCollide = false
				table.insert(parts, v)
			end
		end
	end
end
spawn(function()
	while true do
		game.Players.LocalPlayer.MaximumSimulationRadius = math.pow(math.huge,math.huge)*math.huge
		sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",math.pow(math.huge,math.huge)*math.huge)
		game:GetService("RunService").Heartbeat:Wait()
	end
end)
spawn(function()
	while true do
		if running then
			for _, v in pairs(workspace.WorldSpawn:GetChildren()) do
				if v.Name == 'MineableRock' and v:FindFirstChild("RockString") and v.RockString.Value == "Sandstone" and v.Rock:FindFirstChild("Stage3") and running then
					for _, n in pairs(v.Rock.Stage3:GetChildren()) do
						if n and n.Name == "Part" and running and humanoid and humanoid.Health == 100 then
							repeat
								if v:FindFirstChild("Part") ~= nil then
									plr.Character.HumanoidRootPart.CFrame = v.Part.CFrame + Vector3.new(0, 2, 0)
									wait(.1)
									cam.CFrame = CFrame.new(cam.CFrame.Position, n.Position)
									wait(.1)
									for _, v in pairs(workspace.Grabable:GetChildren()) do
										if v.Name == "MaterialPart" and v:FindFirstChild("Part") and (v.Part.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude < 30 and v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer and running then
											local args1 = {[1] = v.Part,[2] = {}}
											game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Grab"):InvokeServer(unpack(args1))
											local args2 = {[1] = v.Part,[3] = {}}
											game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Ungrab"):FireServer(unpack(args2))
										end
									end
								end
							until n == nil or not n.Parent or running == false or humanoid.Health < 100
						end
					end
					stage1()
					wait(1)
				end
			end
		end
		wait(1)
	end
end)
spawn(function()
	while true do
			for _, v in pairs(parts) do
				if v and v:FindFirstChild("Configuration") and v.Configuration:FindFirstChild("Data") and v.Configuration.Data:FindFirstChild("MatInd") and v.Configuration.Data.MatInd.Value == "Sand" and v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
					if  v:FindFirstChild("Part") and v.Part:FindFirstChild("BodyPosition") ~= nil then
						local bp = v.Part.BodyPosition
						local xx = shaker:FindFirstChild("Hitbox").CFrame * CFrame.new(0, 0.6, 0)
						local zz = shaker:FindFirstChild("Hitbox").CFrame * CFrame.new(0, 0.6, 0)
						bp.Position = Vector3.new(xx.x, shaker:FindFirstChild("Hitbox").Position.Y, zz.z)
					end
				end
			end
			wait(20)
			for i, v in pairs(parts) do
				if v and v:FindFirstChild("Configuration") and v.Configuration:FindFirstChild("Data") and v.Configuration.Data:FindFirstChild("MatInd") and v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer and v.Configuration.Data.MatInd.Value ~= "Sandstone" and v.Configuration.Data.MatInd.Value ~= "Sand" then
					if v:FindFirstChild("Part") then
						if v.Part:FindFirstChild("BodyPosition") ~= nil then
							v.Part.CanCollide = false
							v.Part.BodyPosition.Position = Vector3.new(-437, 3, -91)
						else
							local bp = Instance.new("BodyPosition")
							bp.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
							bp.Parent = v.Part
							v.Part.CanCollide = false
							bp.Position = Vector3.new(-437, 3, -91)
						end
						table.remove(parts, i)
					end
				end
			end
			wait(5)
		workspace:WaitForChild("Map"):WaitForChild("Sellary"):WaitForChild("Keeper"):WaitForChild("IPart"):WaitForChild("Interact"):FireServer()
		wait(1)
	end
end)
spawn(function()
	while true do
		wait(600)
		running = false
		for _, v in pairs(workspace.Grabable:GetChildren()) do
			if  v.Name == "MaterialPart" and v:FindFirstChild("Configuration") and v.Configuration:FindFirstChild("Data") and v.Configuration.Data:FindFirstChild("MatInd") and v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer and v.Configuration.Data.MatInd.Value ~= "Sandstone" and v.Configuration.Data.MatInd.Value ~= "Sand" then
				if v:FindFirstChild("Part") then
					if v.Part:FindFirstChild("BodyPosition") ~= nil then
						
					else
						local bp = Instance.new("BodyPosition")
						bp.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
						bp.Parent = v.Part
						v.Part.CanCollide = false
						bp.Position = Vector3.new(-437, 3, -91)
					end
					plr.Character.HumanoidRootPart.CFrame = v.Part.CFrame
					local args1 = {[1] = v.Part,[2] = {}}
					game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Grab"):InvokeServer(unpack(args1))
					local args2 = {[1] = v.Part,[3] = {}}
					game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Ungrab"):FireServer(unpack(args2))
				end
			end
		end
		wait(1)
		running = true
	end
end)
spawn(function()
	while true do
		if plr.Character and plr.Character:FindFirstChild("Humanoid") then
			if humanoid.Health < 100 then
				local args = {[1] = "ResetInit"}
				game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ClientEvent"):FireServer(unpack(args))
				wait(7)
				game:GetService("Players").LocalPlayer.Backpack["Duality Pickaxe"].Parent = game.Players.LocalPlayer.Character
			end
		end
		wait(1)
	end
end)
